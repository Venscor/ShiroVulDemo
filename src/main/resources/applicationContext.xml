<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd">
    <context:component-scan base-package="com.jadyer"/>
    <mvc:annotation-driven/>
    <mvc:view-controller path="/" view-name="forward:/login.jsp"/>
    <mvc:view-controller path="/tomain" view-name="forward:/main.jsp"/>
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 指定Shiro验证用户登录的类为自定义的Realm（若有多个Realm，可使用[realms]属性代替） -->
        <property name="realm">
            <bean class="com.jadyer.demo.realm.MyRealm"/>
        </property>
        <!--
        Shiro默认会使用Servlet容器的Session，此时修改超时时间的话，可以修改web.xml或者这里自定义的MyRealm
        而若想使用Shiro原生Session则可以设置sessionMode属性为native，此时修改超时时间则只能修改MyRealm
        -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>

    <!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，并且Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接（可根据项目的URL进行替换），非必须的属性，默认会找Web工程根目录下的[/login.jsp] -->
        <property name="loginUrl" value="/"/>
        <!-- 登录成功后要跳转的连接（本例中此属性用不到，因为登录成功后的处理逻辑已在LoginController中硬编码为main.jsp） -->
        <!-- <property name="successUrl" value="/system/main"/> -->
        <!--
        用户访问未授权的资源时，所显示的连接
        若想更明显的测试此属性可以修改它的值，比如unauthor.jsp
        然后用[xuanyu]登录后访问/admin/list.jsp就看见浏览器会显示unauthor.jsp
        -->
        <property name="unauthorizedUrl" value="/"/>
        <!--
        Shiro连接约束配置，即过滤链的定义
        更详细介绍，见本文最下方提供的Shiro-1.2.2内置的FilterChain说明
        下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的
        anon：它对应的过滤器里面是空的，什么都没做，另外.do和.jsp后面的*表示参数，比方说[login.jsp?main]这种
        authc：该过滤器下的页面必须验证后才能访问，它是Shiro内置的org.apache.shiro.web.filter.authc.FormAuthenticationFilter
        注意：对于类似资源，既有authc验证，也有anon允许匿名访问的情况下，需要将anon设置放在authc前面，才会生效
        -->
        <property name="filterChainDefinitions">
            <value>
                /main**           = authc
                /admin/list**     = authc,perms[admin:manage]
                /user/info-anon** = anon
                /user/info**      = authc
            </value>
        </property>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <!-- http://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/spring/LifecycleBeanPostProcessor.html -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--
    开启Shiro的注解（比如@RequiresRoles、@RequiresPermissions）
    配置以下两个bean即可实现此功能（其需借助SpringAOP扫描使用Shiro注解的类，并在必要时进行安全逻辑验证）
    并且：Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run
    说明：本例并未使用Shiro注解，个人觉得将权限通过注解的方式硬编码在程序中，查看起来不是很方便
    -->
    <!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    -->
</beans>